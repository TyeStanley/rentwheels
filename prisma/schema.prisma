generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  username      String          @unique
  email         String          @unique
  password      String
  picture       String
  pictureKey    String
  coverImage    String
  coverImageKey String
  role          Role
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  car           Car[]
  UserLikesCar  UserLikesCar[]
  UserRentedCar UserRentedCar[]
}

model Car {
  id           String       @id @default(uuid())
  title        String
  type         String
  rentPrice    Int
  capacity     Int
  transmission Transmission
  location     String
  fuelCapacity Int
  description  String
  images       CarImage[]

  user         User           @relation(fields: [userId], references: [id])
  userId       String
  UserLikesCar UserLikesCar[]

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  UserRentedCar UserRentedCar[]
}

model CarImage {
  id          String @id @default(uuid())
  url         String
  key         String
  blurDataURL String
  car         Car    @relation(fields: [carId], references: [id], onDelete: Cascade)
  carId       String
}

model UserLikesCar {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  car   Car    @relation(fields: [carId], references: [id])
  carId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, carId])
}

model UserRentedCar {
  user   User   @relation(fields: [userId], references: [id])
  userId String

  car   Car    @relation(fields: [carId], references: [id])
  carId String

  createdAt DateTime @default(now()) // The date and time when the record was created
  updatedAt DateTime @updatedAt

  @@id([userId, carId])
}

enum Transmission {
  Manual
  Automatic
}

enum Role {
  Agent
  Renter
}
